{"charon_version":"0.1.127","translated":{"crate_name":"llbc_example","options":{"ullbc":false,"lib":false,"bin":null,"mir_promoted":false,"mir_optimized":false,"mir":null,"input_file":null,"read_llbc":null,"dest_dir":null,"dest_file":null,"use_polonius":false,"skip_borrowck":false,"monomorphize":false,"monomorphize_conservative":false,"extract_opaque_bodies":false,"translate_all_methods":false,"include":[],"opaque":[],"exclude":["core::ops::drop::Drop","{impl core::ops::drop::Drop for _}"],"remove_associated_types":["*"],"hide_marker_traits":true,"hide_allocator":true,"remove_unused_self_clauses":true,"add_drop_bounds":false,"start_from":[],"no_cargo":false,"rustc_args":[],"cargo_args":[],"abort_on_error":false,"error_on_warnings":false,"no_serialize":false,"print_original_ullbc":false,"print_ullbc":false,"print_built_llbc":false,"print_llbc":false,"no_merge_goto_chains":false,"no_ops_to_function_calls":false,"raw_boxes":false,"preset":"Aeneas"},"target_information":{"target_pointer_size":8,"is_little_endian":true},"item_names":[{"key":{"Type":5},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Formatter",0]}]},{"key":{"Type":1},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Ident":["Global",0]}]},{"key":{"Fun":2},"value":[{"Ident":["alloc",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["into_vec",0]}]},{"key":{"Fun":15},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get_mut",0]}]},{"key":{"Fun":5},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":2},"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["new_v1",0]}]},{"key":{"Fun":14},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get",0]}]},{"key":{"Type":11},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["MetaSized",0]},{"Ident":["{vtable}",0]}]},{"key":{"Fun":23},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["allocate_zeroed",0]}]},{"key":{"Fun":17},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get_unchecked_mut",0]}]},{"key":{"Global":5},"value":[{"Ident":["alloc",0]},{"Ident":["boxed",0]},{"Impl":{"Trait":1}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":25},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["grow",0]}]},{"key":{"Type":2},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Arguments",0]}]},{"key":{"Fun":27},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["shrink",0]}]},{"key":{"Fun":3},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["index",0]},{"Ident":["Index",0]},{"Ident":["index",0]}]},{"key":{"Type":8},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["{vtable}",0]}]},{"key":{"Global":1},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Impl":{"Trait":7}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":19},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["index_mut",0]}]},{"key":{"Type":0},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Ident":["Vec",0]}]},{"key":{"TraitImpl":0},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}}]},{"key":{"Type":3},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Ident":["Argument",0]}]},{"key":{"Fun":0},"value":[{"Ident":["llbc_example",0]},{"Ident":["main",0]}]},{"key":{"TraitImpl":2},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":2}}]},{"key":{"Fun":1},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Ident":["exchange_malloc",0]}]},{"key":{"TraitImpl":6},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":6}}]},{"key":{"Fun":30},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":6}},{"Ident":["drop",0]}]},{"key":{"TraitDecl":6},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]}]},{"key":{"Fun":4},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":3},"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["new_display",0]}]},{"key":{"TraitDecl":4},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["index",0]},{"Ident":["Index",0]}]},{"key":{"TraitImpl":5},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":{"Trait":5}}]},{"key":{"Type":12},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["index",0]},{"Ident":["Index",0]},{"Ident":["{vtable}",0]}]},{"key":{"TraitImpl":1},"value":[{"Ident":["alloc",0]},{"Ident":["boxed",0]},{"Impl":{"Trait":1}}]},{"key":{"Type":9},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Ident":["Sealed",0]},{"Ident":["{vtable}",0]}]},{"key":{"Fun":12},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index",0]}]},{"key":{"Fun":18},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["index",0]}]},{"key":{"Global":3},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Impl":{"Trait":4}},{"Ident":["{vtable}",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["core",0]},{"Ident":["alloc",0]},{"Ident":["Allocator",0]}]},{"key":{"Type":7},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Error",0]}]},{"key":{"Global":6},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":2}},{"Ident":["{vtable}",0]}]},{"key":{"Global":7},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":6}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":6},"value":[{"Ident":["std",0]},{"Ident":["io",0]},{"Ident":["stdio",0]},{"Ident":["_print",0]}]},{"key":{"Type":4},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]},{"Ident":["{vtable}",0]}]},{"key":{"Fun":21},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Impl":{"Trait":4}},{"Ident":["fmt",0]}]},{"key":{"Fun":24},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["deallocate",0]}]},{"key":{"TraitImpl":4},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Impl":{"Trait":4}}]},{"key":{"Global":4},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["{vtable}",0]}]},{"key":{"Type":10},"value":[{"Ident":["core",0]},{"Ident":["option",0]},{"Ident":["Option",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}]},{"key":{"Fun":11},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked_mut",0]}]},{"key":{"Fun":10},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked",0]}]},{"key":{"Fun":13},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index_mut",0]}]},{"key":{"Fun":20},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":{"Trait":5}},{"Ident":["fmt",0]}]},{"key":{"Fun":9},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_mut",0]}]},{"key":{"TraitImpl":3},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}}]},{"key":{"Fun":26},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["grow_zeroed",0]}]},{"key":{"TraitDecl":1},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["MetaSized",0]}]},{"key":{"Fun":7},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]},{"Ident":["fmt",0]}]},{"key":{"Fun":16},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get_unchecked",0]}]},{"key":{"Fun":8},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get",0]}]},{"key":{"Fun":22},"value":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Impl":{"Trait":0}},{"Ident":["allocate",0]}]},{"key":{"TraitDecl":7},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Ident":["Sealed",0]}]},{"key":{"TraitDecl":5},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]}]},{"key":{"Global":0},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":29},"value":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":2}},{"Ident":["index",0]}]},{"key":{"Global":2},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":{"Trait":5}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":28},"value":[{"Ident":["alloc",0]},{"Ident":["boxed",0]},{"Impl":{"Trait":1}},{"Ident":["drop",0]}]},{"key":{"Type":6},"value":[{"Ident":["core",0]},{"Ident":["result",0]},{"Ident":["Result",0]}]},{"key":{"TraitImpl":7},"value":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Impl":{"Trait":7}}]},{"key":{"TraitDecl":3},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["drop",0]},{"Ident":["Drop",0]}]}],"short_names":[{"key":{"Global":1},"value":[{"Impl":{"Trait":7}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":6},"value":[{"Ident":["_print",0]}]},{"key":{"Type":7},"value":[{"Ident":["Error",0]}]},{"key":{"TraitDecl":5},"value":[{"Ident":["SliceIndex",0]}]},{"key":{"TraitDecl":1},"value":[{"Ident":["MetaSized",0]}]},{"key":{"Fun":1},"value":[{"Ident":["exchange_malloc",0]}]},{"key":{"Fun":22},"value":[{"Ident":["allocate",0]}]},{"key":{"Fun":5},"value":[{"Ident":["new_v1",0]}]},{"key":{"TraitImpl":7},"value":[{"Impl":{"Trait":7}}]},{"key":{"TraitImpl":1},"value":[{"Impl":{"Trait":1}}]},{"key":{"TraitImpl":6},"value":[{"Impl":{"Trait":6}}]},{"key":{"Fun":21},"value":[{"Impl":{"Trait":4}},{"Ident":["fmt",0]}]},{"key":{"TraitImpl":3},"value":[{"Impl":{"Trait":3}}]},{"key":{"Global":2},"value":[{"Impl":{"Trait":5}},{"Ident":["{vtable}",0]}]},{"key":{"Type":10},"value":[{"Ident":["Option",0]}]},{"key":{"Fun":4},"value":[{"Ident":["new_display",0]}]},{"key":{"TraitDecl":3},"value":[{"Ident":["Drop",0]}]},{"key":{"Fun":25},"value":[{"Ident":["grow",0]}]},{"key":{"Fun":18},"value":[{"Impl":{"Trait":3}},{"Ident":["index",0]}]},{"key":{"Fun":26},"value":[{"Ident":["grow_zeroed",0]}]},{"key":{"TraitDecl":4},"value":[{"Ident":["Index",0]}]},{"key":{"Fun":19},"value":[{"Impl":{"Trait":3}},{"Ident":["index_mut",0]}]},{"key":{"Fun":17},"value":[{"Impl":{"Trait":3}},{"Ident":["get_unchecked_mut",0]}]},{"key":{"Global":5},"value":[{"Impl":{"Trait":1}},{"Ident":["{vtable}",0]}]},{"key":{"Global":3},"value":[{"Impl":{"Trait":4}},{"Ident":["{vtable}",0]}]},{"key":{"Type":2},"value":[{"Ident":["Arguments",0]}]},{"key":{"Fun":0},"value":[{"Ident":["main",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["Allocator",0]}]},{"key":{"Type":6},"value":[{"Ident":["Result",0]}]},{"key":{"TraitImpl":5},"value":[{"Impl":{"Trait":5}}]},{"key":{"Fun":20},"value":[{"Impl":{"Trait":5}},{"Ident":["fmt",0]}]},{"key":{"Type":1},"value":[{"Ident":["Global",0]}]},{"key":{"Type":0},"value":[{"Ident":["Vec",0]}]},{"key":{"Type":3},"value":[{"Ident":["Argument",0]}]},{"key":{"Fun":30},"value":[{"Impl":{"Trait":6}},{"Ident":["drop",0]}]},{"key":{"Global":6},"value":[{"Impl":{"Trait":2}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":29},"value":[{"Impl":{"Trait":2}},{"Ident":["index",0]}]},{"key":{"Fun":28},"value":[{"Impl":{"Trait":1}},{"Ident":["drop",0]}]},{"key":{"TraitDecl":7},"value":[{"Ident":["Sealed",0]}]},{"key":{"Global":7},"value":[{"Impl":{"Trait":6}},{"Ident":["{vtable}",0]}]},{"key":{"Fun":23},"value":[{"Ident":["allocate_zeroed",0]}]},{"key":{"TraitImpl":2},"value":[{"Impl":{"Trait":2}}]},{"key":{"TraitImpl":4},"value":[{"Impl":{"Trait":4}}]},{"key":{"Fun":16},"value":[{"Impl":{"Trait":3}},{"Ident":["get_unchecked",0]}]},{"key":{"Fun":15},"value":[{"Impl":{"Trait":3}},{"Ident":["get_mut",0]}]},{"key":{"TraitImpl":0},"value":[{"Impl":{"Trait":0}}]},{"key":{"Fun":27},"value":[{"Ident":["shrink",0]}]},{"key":{"Fun":14},"value":[{"Impl":{"Trait":3}},{"Ident":["get",0]}]},{"key":{"Global":4},"value":[{"Impl":{"Trait":0}},{"Ident":["{vtable}",0]}]},{"key":{"Global":0},"value":[{"Impl":{"Trait":3}},{"Ident":["{vtable}",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["Sized",0]}]},{"key":{"TraitDecl":6},"value":[{"Ident":["Display",0]}]},{"key":{"Type":5},"value":[{"Ident":["Formatter",0]}]},{"key":{"Fun":2},"value":[{"Ident":["into_vec",0]}]},{"key":{"Fun":24},"value":[{"Ident":["deallocate",0]}]}],"files":[{"name":{"Local":"src/main.rs"},"crate_name":"llbc_example","contents":"fn main() {\n    let v = vec![1, 2, 3];\n    let x = &v[0];\n    println!(\"{}\", x);\n}"},{"name":{"Local":"/rustc/library/alloc/src/vec/mod.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/alloc/src/lib.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/alloc/src/alloc.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/core/src/marker.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/lib.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/alloc/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/alloc/src/macros.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/alloc/src/boxed.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/std/src/macros.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/core/src/fmt/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/fmt/rt.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/drop.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/alloc/src/slice.rs"},"crate_name":"alloc","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/index.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/slice/index.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/slice/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/fmt/num.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/std/src/io/stdio.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/std/src/io/mod.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/std/src/lib.rs"},"crate_name":"std","contents":null},{"name":{"Local":"/rustc/library/core/src/result.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/option.rs"},"crate_name":"core","contents":null}],"type_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Ident":["Vec",0]}],"span":{"span":{"file_id":1,"beg":{"line":414,"col":0},"end":{"line":414,"col":96}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A contiguous growable array type, written as `Vec<T>`, short for 'vector'."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut vec = Vec::new();"},{"DocComment":" vec.push(1);"},{"DocComment":" vec.push(2);"},{"DocComment":""},{"DocComment":" assert_eq!(vec.len(), 2);"},{"DocComment":" assert_eq!(vec[0], 1);"},{"DocComment":""},{"DocComment":" assert_eq!(vec.pop(), Some(2));"},{"DocComment":" assert_eq!(vec.len(), 1);"},{"DocComment":""},{"DocComment":" vec[0] = 7;"},{"DocComment":" assert_eq!(vec[0], 7);"},{"DocComment":""},{"DocComment":" vec.extend([1, 2, 3]);"},{"DocComment":""},{"DocComment":" for x in &vec {"},{"DocComment":"     println!(\"{x}\");"},{"DocComment":" }"},{"DocComment":" assert_eq!(vec, [7, 1, 2, 3]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The [`vec!`] macro is provided for convenient initialization:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut vec1 = vec![1, 2, 3];"},{"DocComment":" vec1.push(4);"},{"DocComment":" let vec2 = Vec::from([1, 2, 3, 4]);"},{"DocComment":" assert_eq!(vec1, vec2);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" It can also initialize each element of a `Vec<T>` with a given value."},{"DocComment":" This may be more efficient than performing allocation and initialization"},{"DocComment":" in separate steps, especially when initializing a vector of zeros:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let vec = vec![0; 5];"},{"DocComment":" assert_eq!(vec, [0, 0, 0, 0, 0]);"},{"DocComment":""},{"DocComment":" // The following is equivalent, but potentially slower:"},{"DocComment":" let mut vec = Vec::with_capacity(5);"},{"DocComment":" vec.resize(5, 0);"},{"DocComment":" assert_eq!(vec, [0, 0, 0, 0, 0]);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" For more information, see"},{"DocComment":" [Capacity and Reallocation](#capacity-and-reallocation)."},{"DocComment":""},{"DocComment":" Use a `Vec<T>` as an efficient stack:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut stack = Vec::new();"},{"DocComment":""},{"DocComment":" stack.push(1);"},{"DocComment":" stack.push(2);"},{"DocComment":" stack.push(3);"},{"DocComment":""},{"DocComment":" while let Some(top) = stack.pop() {"},{"DocComment":"     // Prints 3, 2, 1"},{"DocComment":"     println!(\"{top}\");"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" # Indexing"},{"DocComment":""},{"DocComment":" The `Vec` type allows access to values by index, because it implements the"},{"DocComment":" [`Index`] trait. An example will be more explicit:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let v = vec![0, 2, 4, 6];"},{"DocComment":" println!(\"{}\", v[1]); // it will display '2'"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" However be careful: if you try to access an index which isn't in the `Vec`,"},{"DocComment":" your software will panic! You cannot do this:"},{"DocComment":""},{"DocComment":" ```should_panic"},{"DocComment":" let v = vec![0, 2, 4, 6];"},{"DocComment":" println!(\"{}\", v[6]); // it will panic!"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Use [`get`] and [`get_mut`] if you want to check whether the index is in"},{"DocComment":" the `Vec`."},{"DocComment":""},{"DocComment":" # Slicing"},{"DocComment":""},{"DocComment":" A `Vec` can be mutable. On the other hand, slices are read-only objects."},{"DocComment":" To get a [slice][prim@slice], use [`&`]. Example:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" fn read_slice(slice: &[usize]) {"},{"DocComment":"     // ..."},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let v = vec![0, 1];"},{"DocComment":" read_slice(&v);"},{"DocComment":""},{"DocComment":" // ... and that's all!"},{"DocComment":" // you can also do it like this:"},{"DocComment":" let u: &[usize] = &v;"},{"DocComment":" // or like this:"},{"DocComment":" let u: &[_] = &v;"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" In Rust, it's more common to pass slices as arguments rather than vectors"},{"DocComment":" when you just want to provide read access. The same goes for [`String`] and"},{"DocComment":" [`&str`]."},{"DocComment":""},{"DocComment":" # Capacity and reallocation"},{"DocComment":""},{"DocComment":" The capacity of a vector is the amount of space allocated for any future"},{"DocComment":" elements that will be added onto the vector. This is not to be confused with"},{"DocComment":" the *length* of a vector, which specifies the number of actual elements"},{"DocComment":" within the vector. If a vector's length exceeds its capacity, its capacity"},{"DocComment":" will automatically be increased, but its elements will have to be"},{"DocComment":" reallocated."},{"DocComment":""},{"DocComment":" For example, a vector with capacity 10 and length 0 would be an empty vector"},{"DocComment":" with space for 10 more elements. Pushing 10 or fewer elements onto the"},{"DocComment":" vector will not change its capacity or cause reallocation to occur. However,"},{"DocComment":" if the vector's length is increased to 11, it will have to reallocate, which"},{"DocComment":" can be slow. For this reason, it is recommended to use [`Vec::with_capacity`]"},{"DocComment":" whenever possible to specify how big the vector is expected to get."},{"DocComment":""},{"DocComment":" # Guarantees"},{"DocComment":""},{"DocComment":" Due to its incredibly fundamental nature, `Vec` makes a lot of guarantees"},{"DocComment":" about its design. This ensures that it's as low-overhead as possible in"},{"DocComment":" the general case, and can be correctly manipulated in primitive ways"},{"DocComment":" by unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`."},{"DocComment":" If additional type parameters are added (e.g., to support custom allocators),"},{"DocComment":" overriding their defaults may change the behavior."},{"DocComment":""},{"DocComment":" Most fundamentally, `Vec` is and always will be a (pointer, capacity, length)"},{"DocComment":" triplet. No more, no less. The order of these fields is completely"},{"DocComment":" unspecified, and you should use the appropriate methods to modify these."},{"DocComment":" The pointer will never be null, so this type is null-pointer-optimized."},{"DocComment":""},{"DocComment":" However, the pointer might not actually point to allocated memory. In particular,"},{"DocComment":" if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],"},{"DocComment":" [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]"},{"DocComment":" on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized"},{"DocComment":" types inside a `Vec`, it will not allocate space for them. *Note that in this case"},{"DocComment":" the `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only"},{"DocComment":" if <code>[size_of::\\<T>]\\() * [capacity]\\() > 0</code>. In general, `Vec`'s allocation"},{"DocComment":" details are very subtle --- if you intend to allocate memory using a `Vec`"},{"DocComment":" and use it for something else (either to pass to unsafe code, or to build your"},{"DocComment":" own memory-backed collection), be sure to deallocate this memory by using"},{"DocComment":" `from_raw_parts` to recover the `Vec` and then dropping it."},{"DocComment":""},{"DocComment":" If a `Vec` *has* allocated memory, then the memory it points to is on the heap"},{"DocComment":" (as defined by the allocator Rust is configured to use by default), and its"},{"DocComment":" pointer points to [`len`] initialized, contiguous elements in order (what"},{"DocComment":" you would see if you coerced it to a slice), followed by <code>[capacity] - [len]</code>"},{"DocComment":" logically uninitialized, contiguous elements."},{"DocComment":""},{"DocComment":" A vector containing the elements `'a'` and `'b'` with capacity 4 can be"},{"DocComment":" visualized as below. The top part is the `Vec` struct, it contains a"},{"DocComment":" pointer to the head of the allocation in the heap, length and capacity."},{"DocComment":" The bottom part is the allocation on the heap, a contiguous memory block."},{"DocComment":""},{"DocComment":" ```text"},{"DocComment":"             ptr      len  capacity"},{"DocComment":"        +--------+--------+--------+"},{"DocComment":"        | 0x0123 |      2 |      4 |"},{"DocComment":"        +--------+--------+--------+"},{"DocComment":"             |"},{"DocComment":"             v"},{"DocComment":" Heap   +--------+--------+--------+--------+"},{"DocComment":"        |    'a' |    'b' | uninit | uninit |"},{"DocComment":"        +--------+--------+--------+--------+"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" - **uninit** represents memory that is not initialized, see [`MaybeUninit`]."},{"DocComment":" - Note: the ABI is not stable and `Vec` makes no guarantees about its memory"},{"DocComment":"   layout (including the order of fields)."},{"DocComment":""},{"DocComment":" `Vec` will never perform a \"small optimization\" where elements are actually"},{"DocComment":" stored on the stack for two reasons:"},{"DocComment":""},{"DocComment":" * It would make it more difficult for unsafe code to correctly manipulate"},{"DocComment":"   a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were"},{"DocComment":"   only moved, and it would be more difficult to determine if a `Vec` had"},{"DocComment":"   actually allocated memory."},{"DocComment":""},{"DocComment":" * It would penalize the general case, incurring an additional branch"},{"DocComment":"   on every access."},{"DocComment":""},{"DocComment":" `Vec` will never automatically shrink itself, even if completely empty. This"},{"DocComment":" ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`"},{"DocComment":" and then filling it back up to the same [`len`] should incur no calls to"},{"DocComment":" the allocator. If you wish to free up unused memory, use"},{"DocComment":" [`shrink_to_fit`] or [`shrink_to`]."},{"DocComment":""},{"DocComment":" [`push`] and [`insert`] will never (re)allocate if the reported capacity is"},{"DocComment":" sufficient. [`push`] and [`insert`] *will* (re)allocate if"},{"DocComment":" <code>[len] == [capacity]</code>. That is, the reported capacity is completely"},{"DocComment":" accurate, and can be relied on. It can even be used to manually free the memory"},{"DocComment":" allocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even"},{"DocComment":" when not necessary."},{"DocComment":""},{"DocComment":" `Vec` does not guarantee any particular growth strategy when reallocating"},{"DocComment":" when full, nor when [`reserve`] is called. The current strategy is basic"},{"DocComment":" and it may prove desirable to use a non-constant growth factor. Whatever"},{"DocComment":" strategy is used will of course guarantee *O*(1) amortized [`push`]."},{"DocComment":""},{"DocComment":" It is guaranteed, in order to respect the intentions of the programmer, that"},{"DocComment":" all of `vec![e_1, e_2, ..., e_n]`, `vec![x; n]`, and [`Vec::with_capacity(n)`] produce a `Vec`"},{"DocComment":" that requests an allocation of the exact size needed for precisely `n` elements from the allocator,"},{"DocComment":" and no other size (such as, for example: a size rounded up to the nearest power of 2)."},{"DocComment":" The allocator will return an allocation that is at least as large as requested, but it may be larger."},{"DocComment":""},{"DocComment":" It is guaranteed that the [`Vec::capacity`] method returns a value that is at least the requested capacity"},{"DocComment":" and not more than the allocated capacity."},{"DocComment":""},{"DocComment":" The method [`Vec::shrink_to_fit`] will attempt to discard excess capacity an allocator has given to a `Vec`."},{"DocComment":" If <code>[len] == [capacity]</code>, then a `Vec<T>` can be converted"},{"DocComment":" to and from a [`Box<[T]>`][owned slice] without reallocating or moving the elements."},{"DocComment":" `Vec` exploits this fact as much as reasonable when implementing common conversions"},{"DocComment":" such as [`into_boxed_slice`]."},{"DocComment":""},{"DocComment":" `Vec` will not specifically overwrite any data that is removed from it,"},{"DocComment":" but also won't specifically preserve it. Its uninitialized memory is"},{"DocComment":" scratch space that it may use however it wants. It will generally just do"},{"DocComment":" whatever is most efficient or otherwise easy to implement. Do not rely on"},{"DocComment":" removed data to be erased for security purposes. Even if you drop a `Vec`, its"},{"DocComment":" buffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory"},{"DocComment":" first, that might not actually happen because the optimizer does not consider"},{"DocComment":" this a side-effect that must be preserved. There is one case which we will"},{"DocComment":" not break, however: using `unsafe` code to write to the excess capacity,"},{"DocComment":" and then increasing the length to match, is always valid."},{"DocComment":""},{"DocComment":" Currently, `Vec` does not guarantee the order in which elements are dropped."},{"DocComment":" The order has changed in the past and may change again."},{"DocComment":""},{"DocComment":" [`get`]: slice::get"},{"DocComment":" [`get_mut`]: slice::get_mut"},{"DocComment":" [`String`]: crate::string::String"},{"DocComment":" [`&str`]: type@str"},{"DocComment":" [`shrink_to_fit`]: Vec::shrink_to_fit"},{"DocComment":" [`shrink_to`]: Vec::shrink_to"},{"DocComment":" [capacity]: Vec::capacity"},{"DocComment":" [`capacity`]: Vec::capacity"},{"DocComment":" [`Vec::capacity`]: Vec::capacity"},{"DocComment":" [size_of::\\<T>]: size_of"},{"DocComment":" [len]: Vec::len"},{"DocComment":" [`len`]: Vec::len"},{"DocComment":" [`push`]: Vec::push"},{"DocComment":" [`insert`]: Vec::insert"},{"DocComment":" [`reserve`]: Vec::reserve"},{"DocComment":" [`Vec::with_capacity(n)`]: Vec::with_capacity"},{"DocComment":" [`MaybeUninit`]: core::mem::MaybeUninit"},{"DocComment":" [owned slice]: Box"},{"DocComment":" [`into_boxed_slice`]: Vec::into_boxed_slice"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Vec\""}},{"Unknown":{"path":"rustc_insignificant_dtor","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Vec"},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":"Opaque","layout":null,"ptr_metadata":"None"},{"def_id":1,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Ident":["Global",0]}],"span":{"span":{"file_id":3,"beg":{"line":51,"col":0},"end":{"line":51,"col":17}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The global memory allocator."},{"DocComment":""},{"DocComment":" This type implements the [`Allocator`] trait by forwarding calls"},{"DocComment":" to the allocator registered with the `#[global_allocator]` attribute"},{"DocComment":" if there is one, or the `std` crate’s default."},{"DocComment":""},{"DocComment":" Note: while this type is unstable, the functionality it provides can be"},{"DocComment":" accessed through the [free functions in `alloc`](self#functions)."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"global_alloc_ty"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":{"Struct":[]},"layout":{"size":0,"align":1,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Arguments",0]}],"span":{"span":{"file_id":10,"beg":{"line":617,"col":0},"end":{"line":617,"col":24}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" This structure represents a safely precompiled version of a format string"},{"DocComment":" and its arguments. This cannot be generated at runtime because it cannot"},{"DocComment":" safely be done, so no constructors are given and the fields are private"},{"DocComment":" to prevent modification."},{"DocComment":""},{"DocComment":" The [`format_args!`] macro will safely create an instance of this structure."},{"DocComment":" The macro validates the format string at compile-time so usage of the"},{"DocComment":" [`write()`] and [`format()`] functions can be safely performed."},{"DocComment":""},{"DocComment":" You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`"},{"DocComment":" and `Display` contexts as seen below. The example also shows that `Debug`"},{"DocComment":" and `Display` format to the same thing: the interpolated format string"},{"DocComment":" in `format_args!`."},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));"},{"DocComment":" let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));"},{"DocComment":" assert_eq!(\"1 foo 2\", display);"},{"DocComment":" assert_eq!(display, debug);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`format()`]: ../../std/fmt/fn.format.html"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"format_arguments"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[{"regions":[],"skip_binder":[{"Var":{"Free":0}},{"Var":{"Free":0}}]}],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":"Opaque","layout":{"size":48,"align":8,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[0,32,16],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Ident":["Argument",0]}],"span":{"span":{"file_id":11,"beg":{"line":59,"col":0},"end":{"line":59,"col":23}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"format_argument"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":"Opaque","layout":{"size":16,"align":8,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[0],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},null,{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Formatter",0]}],"span":{"span":{"file_id":10,"beg":{"line":566,"col":0},"end":{"line":566,"col":24}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Configuration for formatting."},{"DocComment":""},{"DocComment":" A `Formatter` represents various options related to formatting. Users do not"},{"DocComment":" construct `Formatter`s directly; a mutable reference to one is passed to"},{"DocComment":" the `fmt` method of all formatting traits, like [`Debug`] and [`Display`]."},{"DocComment":""},{"DocComment":" To interact with a `Formatter`, you'll call various methods to change the"},{"DocComment":" various options related to formatting. For examples, please see the"},{"DocComment":" documentation of the methods defined on `Formatter` below."},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Formatter\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Formatter"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[{"regions":[],"skip_binder":[{"Var":{"Free":0}},{"Var":{"Free":0}}]}],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":"Opaque","layout":{"size":24,"align":8,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[16,0],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["result",0]},{"Ident":["Result",0]}],"span":{"span":{"file_id":22,"beg":{"line":548,"col":0},"end":{"line":548,"col":21}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`])."},{"DocComment":""},{"DocComment":" See the [module documentation](self) for details."},{"Unknown":{"path":"doc","args":"search_unbox"}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Result\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Result"},"generics":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"E"}],"const_generics":[],"trait_clauses":[null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":{"Enum":[{"span":{"span":{"file_id":22,"beg":{"line":552,"col":4},"end":{"line":552,"col":6}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Contains the success value"}],"inline":null,"rename":null,"public":true},"name":"Ok","fields":[{"span":{"span":{"file_id":22,"beg":{"line":552,"col":53},"end":{"line":552,"col":54}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":0}}}],"discriminant":{"Signed":["Isize","0"]}},{"span":{"span":{"file_id":22,"beg":{"line":557,"col":4},"end":{"line":557,"col":7}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Contains the error value"}],"inline":null,"rename":null,"public":true},"name":"Err","fields":[{"span":{"span":{"file_id":22,"beg":{"line":557,"col":54},"end":{"line":557,"col":55}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":1}}}],"discriminant":{"Signed":["Isize","1"]}}]},"layout":null,"ptr_metadata":"None"},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Error",0]}],"span":{"span":{"file_id":10,"beg":{"line":107,"col":0},"end":{"line":107,"col":16}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The error type which is returned from formatting a message into a stream."},{"DocComment":""},{"DocComment":" This type does not support transmission of an error other than that an error"},{"DocComment":" occurred. This is because, despite the existence of this error,"},{"DocComment":" string formatting is considered an infallible operation."},{"DocComment":" `fmt()` implementors should not return this `Error` unless they received it from their"},{"DocComment":" [`Formatter`]. The only time your code should create a new instance of this"},{"DocComment":" error is when implementing `fmt::Write`, in order to cancel the formatting operation when"},{"DocComment":" writing to the underlying stream fails."},{"DocComment":""},{"DocComment":" Any extra information must be arranged to be transmitted through some other means,"},{"DocComment":" such as storing it in a field to be consulted after the formatting operation has been"},{"DocComment":" cancelled. (For example, this is how [`std::io::Write::write_fmt()`] propagates IO errors"},{"DocComment":" during writing.)"},{"DocComment":""},{"DocComment":" This type, `fmt::Error`, should not be"},{"DocComment":" confused with [`std::io::Error`] or [`std::error::Error`], which you may also"},{"DocComment":" have in scope."},{"DocComment":""},{"DocComment":" [`std::io::Error`]: ../../std/io/struct.Error.html"},{"DocComment":" [`std::io::Write::write_fmt()`]: ../../std/io/trait.Write.html#method.write_fmt"},{"DocComment":" [`std::error::Error`]: ../../std/error/trait.Error.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" use std::fmt::{self, write};"},{"DocComment":""},{"DocComment":" let mut output = String::new();"},{"DocComment":" if let Err(fmt::Error) = write(&mut output, format_args!(\"Hello {}!\", \"world\")) {"},{"DocComment":"     panic!(\"An error occurred\");"},{"DocComment":" }"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":{"Struct":[]},"layout":{"size":0,"align":1,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},null,null,{"def_id":10,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["option",0]},{"Ident":["Option",0]}],"span":{"span":{"file_id":23,"beg":{"line":593,"col":0},"end":{"line":593,"col":18}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The `Option` type. See [the module level documentation](self) for more."},{"Unknown":{"path":"doc","args":"search_unbox"}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Option\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Option"},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":"TopLevel","kind":{"Enum":[{"span":{"span":{"file_id":23,"beg":{"line":597,"col":4},"end":{"line":597,"col":8}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" No value."}],"inline":null,"rename":null,"public":true},"name":"None","fields":[],"discriminant":{"Signed":["Isize","0"]}},{"span":{"span":{"file_id":23,"beg":{"line":601,"col":4},"end":{"line":601,"col":8}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Some value of type `T`."}],"inline":null,"rename":null,"public":true},"name":"Some","fields":[{"span":{"span":{"file_id":23,"beg":{"line":601,"col":55},"end":{"line":601,"col":56}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":0}}}],"discriminant":{"Signed":["Isize","1"]}}]},"layout":null,"ptr_metadata":"None"},null,null],"fun_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["llbc_example",0]},{"Ident":["main",0]}],"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"source_text":"fn main() {\n    let v = vec![1, 2, 3];\n    let x = &v[0];\n    println!(\"{}\", x);\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"locals":[{"index":0,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":1,"name":"v","ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"index":2,"name":null,"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"index":3,"name":null,"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"index":4,"name":null,"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"index":5,"name":"x","ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},{"index":6,"name":null,"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},{"index":7,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"index":8,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":9,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":10,"name":null,"ty":{"Adt":{"id":{"Adt":2},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":11,"name":"args","ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}}},{"index":12,"name":null,"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":13,"name":null,"ty":{"Ref":["Erased",{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]},"Shared"]}},{"index":14,"name":null,"ty":{"Ref":["Erased",{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]},"Shared"]}},{"index":15,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}},"Shared"]}},{"index":16,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}},"Shared"]}},{"index":17,"name":null,"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}}},{"index":18,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}},"Shared"]}},{"index":19,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}},"Shared"]}},{"index":20,"name":null,"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":2,"col":8},"end":{"line":2,"col":9}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":2,"col":8},"end":{"line":2,"col":9}},"generated_from_span":null},"id":69,"content":{"StorageLive":20},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":2,"col":8},"end":{"line":2,"col":9}},"generated_from_span":null},"id":64,"content":{"StorageLive":1},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":12},"end":{"line":53,"col":45}},"generated_from_span":null},"id":65,"content":{"StorageLive":2},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":12},"end":{"line":53,"col":45}},"generated_from_span":null},"id":66,"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":35},"end":{"line":53,"col":44}},"generated_from_span":null},"id":67,"content":{"Assign":[{"kind":{"Local":20},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}},{"Aggregate":[{"Array":[{"Literal":{"Int":"I32"}},{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}]},[{"Const":{"value":{"Literal":{"Scalar":{"Signed":["I32","1"]}}},"ty":{"Literal":{"Int":"I32"}}}},{"Const":{"value":{"Literal":{"Scalar":{"Signed":["I32","2"]}}},"ty":{"Literal":{"Int":"I32"}}}},{"Const":{"value":{"Literal":{"Scalar":{"Signed":["I32","3"]}}},"ty":{"Literal":{"Int":"I32"}}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":12},"end":{"line":53,"col":45}},"generated_from_span":null},"id":68,"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":12},"end":{"line":53,"col":45}},"generated_from_span":null},"id":63,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Builtin":"BoxNew"}},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":20},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}}}],"dest":{"kind":{"Local":4},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":12},"end":{"line":53,"col":45}},"generated_from_span":null},"id":57,"content":{"Assign":[{"kind":{"Local":3},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"Use":{"Move":{"kind":{"Local":4},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":12},"end":{"line":53,"col":45}},"generated_from_span":null},"id":58,"content":{"Assign":[{"kind":{"Local":2},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"UnaryOp":[{"Cast":{"Unsize":[{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},{"Length":{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}}]}},{"Move":{"kind":{"Local":3},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":44},"end":{"line":53,"col":45}},"generated_from_span":null},"id":59,"content":{"Drop":[{"kind":{"Local":3},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"kind":{"TraitImpl":{"id":1,"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}],"const_generics":[],"trait_refs":[]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":44},"end":{"line":53,"col":45}},"generated_from_span":null},"id":60,"content":{"Drop":[{"kind":{"Local":4},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"kind":{"TraitImpl":{"id":1,"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","3"]}}}],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}],"const_generics":[],"trait_refs":[]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":44},"end":{"line":53,"col":45}},"generated_from_span":null},"id":61,"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":53,"col":44},"end":{"line":53,"col":45}},"generated_from_span":null},"id":62,"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":50,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"id":53,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":2}},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"args":[{"Move":{"kind":{"Local":2},"ty":{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}],"dest":{"kind":{"Local":1},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":7,"beg":{"line":54,"col":8},"end":{"line":54,"col":9}},"generated_from_span":null},"id":48,"content":{"StorageDead":2},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":8},"end":{"line":3,"col":9}},"generated_from_span":null},"id":49,"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":14},"end":{"line":3,"col":17}},"generated_from_span":null},"id":50,"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":13},"end":{"line":3,"col":14}},"generated_from_span":null},"id":51,"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":13},"end":{"line":3,"col":14}},"generated_from_span":null},"id":52,"content":{"Assign":[{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}},{"Ref":[{"kind":{"Local":1},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":14},"end":{"line":3,"col":17}},"generated_from_span":null},"id":47,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":29}},"generics":{"regions":["Erased"],"types":[{"Literal":{"Int":"I32"}},{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null,{"kind":{"TraitImpl":{"id":3,"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}},{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}},null]}}},"args":[{"Move":{"kind":{"Local":7},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]}}},{"Const":{"value":{"Literal":{"Scalar":{"Unsigned":["Usize","0"]}}},"ty":{"Literal":{"UInt":"Usize"}}}}],"dest":{"kind":{"Local":6},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":16},"end":{"line":3,"col":17}},"generated_from_span":null},"id":36,"content":{"StorageDead":7},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":12},"end":{"line":3,"col":17}},"generated_from_span":null},"id":37,"content":{"Assign":[{"kind":{"Local":5},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":6},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},"Deref"]},"ty":{"Literal":{"Int":"I32"}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":142,"col":22},"end":{"line":144,"col":5}},"generated_from_span":null},"id":38,"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":8},"end":{"line":143,"col":61}},"generated_from_span":null},"id":39,"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":40,"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":41,"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":14},"end":{"line":4,"col":16}},"generated_from_span":null},"id":42,"content":{"StorageLive":12},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":19},"end":{"line":4,"col":20}},"generated_from_span":null},"id":43,"content":{"StorageLive":13},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":19},"end":{"line":4,"col":20}},"generated_from_span":null},"id":44,"content":{"StorageLive":14},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":19},"end":{"line":4,"col":20}},"generated_from_span":null},"id":45,"content":{"Assign":[{"kind":{"Local":14},"ty":{"Ref":["Erased",{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]},"Shared"]}},{"Ref":[{"kind":{"Local":5},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":19},"end":{"line":4,"col":20}},"generated_from_span":null},"id":46,"content":{"Assign":[{"kind":{"Local":13},"ty":{"Ref":["Erased",{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":14},"ty":{"Ref":["Erased",{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]},"Shared"]}},"Deref"]},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":14},"end":{"line":4,"col":16}},"generated_from_span":null},"id":35,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":4}},"generics":{"regions":["Erased","Erased"],"types":[{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}],"const_generics":[],"trait_refs":[null,{"kind":{"TraitImpl":{"id":4,"generics":{"regions":["Erased"],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[{"kind":{"TraitImpl":{"id":5,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}}]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}],"const_generics":[],"trait_refs":[]}}}}]}}},"args":[{"Move":{"kind":{"Local":13},"ty":{"Ref":["Erased",{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]},"Shared"]}}}],"dest":{"kind":{"Local":12},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":15},"end":{"line":4,"col":16}},"generated_from_span":null},"id":22,"content":{"StorageDead":13},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":23,"content":{"Assign":[{"kind":{"Local":11},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}}},{"Aggregate":[{"Array":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}]},[{"Move":{"kind":{"Local":12},"ty":{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"id":24,"content":{"StorageDead":12},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":17}},"generated_from_span":null},"id":25,"content":{"StorageLive":15},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":17}},"generated_from_span":null},"id":26,"content":{"StorageLive":16},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":17}},"generated_from_span":null},"id":27,"content":{"StorageLive":17},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":17}},"generated_from_span":null},"id":28,"content":{"Assign":[{"kind":{"Local":17},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}}},{"Aggregate":[{"Array":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]},{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}]},[{"Const":{"value":{"Literal":{"Str":""}},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}}},{"Const":{"value":{"Literal":{"Str":"\n"}},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":17}},"generated_from_span":null},"id":29,"content":{"Assign":[{"kind":{"Local":16},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Local":17},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":17}},"generated_from_span":null},"id":30,"content":{"Assign":[{"kind":{"Local":15},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":16},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":31,"content":{"StorageLive":18},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":32,"content":{"StorageLive":19},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":33,"content":{"Assign":[{"kind":{"Local":19},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Local":11},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":34,"content":{"Assign":[{"kind":{"Local":18},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":19},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"id":21,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":5}},"generics":{"regions":["Erased"],"types":[],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}},{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":15},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","2"]}}}],"trait_refs":[]}}},"Shared"]}}},{"Move":{"kind":{"Local":18},"ty":{"Ref":["Erased",{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Value":{"Scalar":{"Unsigned":["Usize","1"]}}}],"trait_refs":[]}}},"Shared"]}}}],"dest":{"kind":{"Local":10},"ty":{"Adt":{"id":{"Adt":2},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"id":16,"content":{"StorageDead":19},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"id":17,"content":{"StorageDead":18},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"id":18,"content":{"StorageDead":17},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"id":19,"content":{"StorageDead":16},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"id":20,"content":{"StorageDead":15},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":8},"end":{"line":143,"col":61}},"generated_from_span":null},"id":15,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":6}},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":10},"ty":{"Adt":{"id":{"Adt":2},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}}}],"dest":{"kind":{"Local":9},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}}}},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":60},"end":{"line":143,"col":61}},"generated_from_span":null},"id":1,"content":{"StorageDead":10},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"id":2,"content":{"StorageDead":14},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"id":3,"content":{"StorageDead":11},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"id":4,"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":9,"beg":{"line":144,"col":4},"end":{"line":144,"col":5}},"generated_from_span":null},"id":7,"content":{"StorageDead":8},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":1,"col":10},"end":{"line":5,"col":1}},"generated_from_span":null},"id":9,"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"id":10,"content":{"StorageDead":6},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"id":11,"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"id":12,"content":{"Drop":[{"kind":{"Local":1},"ty":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}}},{"kind":{"TraitImpl":{"id":6,"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[null,null,null]}}}],"const_generics":[],"trait_refs":[]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"id":13,"content":{"StorageDead":1},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":1},"end":{"line":5,"col":1}},"generated_from_span":null},"id":14,"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":1},"end":{"line":5,"col":1}},"generated_from_span":null},"id":0,"content":"Return","comments_before":[]}]}}}}},{"def_id":1,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["alloc",0]},{"Ident":["exchange_malloc",0]}],"span":{"span":{"file_id":3,"beg":{"line":349,"col":0},"end":{"line":349,"col":63}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":"exchange_malloc"},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"UInt":"Usize"}},{"Literal":{"UInt":"Usize"}}],"output":{"RawPtr":[{"Literal":{"UInt":"U8"}},"Mut"]}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":2,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["slice",0]},{"Impl":{"Ty":{"params":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[0,0]}}],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["into_vec",0]}],"span":{"span":{"file_id":14,"beg":{"line":480,"col":4},"end":{"line":480,"col":66}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Converts `self` into a vector without clones or allocation."},{"DocComment":""},{"DocComment":" The resulting vector can be converted back into a box via"},{"DocComment":" `Vec<T>`'s `into_boxed_slice` method."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let s: Box<[i32]> = Box::new([10, 40, 30]);"},{"DocComment":" let x = s.into_vec();"},{"DocComment":" // `s` cannot be used anymore because it has been converted into `x`."},{"DocComment":""},{"DocComment":" assert_eq!(x, vec![10, 40, 30]);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"slice_into_vec\""}}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"slice_into_vec"},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"A"}],"const_generics":[],"trait_clauses":[null,null,null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Builtin":"Box"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null,null]}}}],"output":{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,null,null]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["index",0]},{"Ident":["Index",0]},{"Ident":["index",0]}],"span":{"span":{"file_id":15,"beg":{"line":74,"col":4},"end":{"line":74,"col":49}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Performs the indexing (`container[index]`) operation."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" May panic if the index is out of bounds."},{"Unknown":{"path":"rustc_no_implicit_autorefs","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Idx"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"TypeVar":{"Free":1}}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Shared"]}},"kind":{"TraitDecl":{"trait_ref":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"index","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":3},"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["new_display",0]}],"span":{"span":{"file_id":11,"beg":{"line":110,"col":4},"end":{"line":110,"col":63}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":11,"beg":{"line":110,"col":32},"end":{"line":110,"col":39}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":1}},{"TypeVar":{"Free":0}},"Shared"]}],"output":{"Adt":{"id":{"Adt":3},"generics":{"regions":[{"Var":{"Free":1}}],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":{"Ty":{"params":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":{"id":{"Adt":2},"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}}},"kind":"InherentImplBlock"}}},{"Ident":["new_v1",0]}],"span":{"span":{"file_id":11,"beg":{"line":209,"col":4},"end":{"line":212,"col":22}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" When using the format_args!() macro, this function is used to generate the"},{"DocComment":" Arguments structure."},{"DocComment":""},{"DocComment":" This function should _not_ be const, to make sure we don't accept"},{"DocComment":" format_args!() and panic!() with arguments in const, even when not evaluated:"},{"DocComment":""},{"DocComment":" ```compile_fail,E0015"},{"DocComment":" const _: () = if false { panic!(\"a {}\", \"a\") };"},{"DocComment":" ```"}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[{"index":0,"name":"P","ty":{"UInt":"Usize"}},{"index":1,"name":"A","ty":{"UInt":"Usize"}}],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Ref":["Static",{"Adt":{"id":{"Builtin":"Str"},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"const_generics":[{"Var":{"Free":0}}],"trait_refs":[]}}},"Shared"]},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Array"},"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":3},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[{"Var":{"Free":1}}],"trait_refs":[]}}},"Shared"]}],"output":{"Adt":{"id":{"Adt":2},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":6,"item_meta":{"name":[{"Ident":["std",0]},{"Ident":["io",0]},{"Ident":["stdio",0]},{"Ident":["_print",0]}],"span":{"span":{"file_id":19,"beg":{"line":1274,"col":0},"end":{"line":1274,"col":39}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"doc","args":"hidden"}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":2},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Err":null}},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]},{"Ident":["fmt",0]}],"span":{"span":{"file_id":10,"beg":{"line":1032,"col":4},"end":{"line":1032,"col":51}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"doc","args":"Formats the value using the given formatter.\n\n# Errors\n\nThis function should return [`Err`] if, and only if, the provided [`Formatter`] returns [`Err`].\nString formatting is considered an infallible operation; this function only\nreturns a [`Result`] because writing to the underlying stream might fail and it must\nprovide a way to propagate the fact that an error has occurred back up the stack.\n"}},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::fmt;"},{"DocComment":""},{"DocComment":" struct Position {"},{"DocComment":"     longitude: f32,"},{"DocComment":"     latitude: f32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl fmt::Display for Position {"},{"DocComment":"     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"},{"DocComment":"         write!(f, \"({}, {})\", self.longitude, self.latitude)"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert_eq!("},{"DocComment":"     \"(1.987, 2.983)\","},{"DocComment":"     format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }),"},{"DocComment":" );"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":5},"generics":{"regions":[{"Var":{"Free":2}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":{"Adt":7},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"fmt","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":8,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get",0]}],"span":{"span":{"file_id":16,"beg":{"line":173,"col":4},"end":{"line":173,"col":53}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a shared reference to the output at this location, if in"},{"DocComment":" bounds."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Shared"]}],"output":{"Adt":{"id":{"Adt":10},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":9,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_mut",0]}],"span":{"span":{"file_id":16,"beg":{"line":178,"col":4},"end":{"line":178,"col":65}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a mutable reference to the output at this location, if in"},{"DocComment":" bounds."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Mut"]}],"output":{"Adt":{"id":{"Adt":10},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Mut"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":10,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked",0]}],"span":{"span":{"file_id":16,"beg":{"line":188,"col":4},"end":{"line":188,"col":74}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a pointer to the output at this location, without"},{"DocComment":" performing any bounds checking."},{"DocComment":""},{"DocComment":" Calling this method with an out-of-bounds index or a dangling `slice` pointer"},{"DocComment":" is *[undefined behavior]* even if the resulting pointer is not used."},{"DocComment":""},{"DocComment":" [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"RawPtr":[{"TypeVar":{"Free":1}},"Shared"]}],"output":{"RawPtr":[{"TypeVar":{"Free":2}},"Shared"]}},"kind":{"TraitDecl":{"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":11,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["get_unchecked_mut",0]}],"span":{"span":{"file_id":16,"beg":{"line":198,"col":4},"end":{"line":198,"col":74}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a mutable pointer to the output at this location, without"},{"DocComment":" performing any bounds checking."},{"DocComment":""},{"DocComment":" Calling this method with an out-of-bounds index or a dangling `slice` pointer"},{"DocComment":" is *[undefined behavior]* even if the resulting pointer is not used."},{"DocComment":""},{"DocComment":" [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"RawPtr":[{"TypeVar":{"Free":1}},"Mut"]}],"output":{"RawPtr":[{"TypeVar":{"Free":2}},"Mut"]}},"kind":{"TraitDecl":{"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":12,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index",0]}],"span":{"span":{"file_id":16,"beg":{"line":204,"col":4},"end":{"line":204,"col":47}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a shared reference to the output at this location, panicking"},{"DocComment":" if out of bounds."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Shared"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Shared"]}},"kind":{"TraitDecl":{"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"index","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":13,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]},{"Ident":["index_mut",0]}],"span":{"span":{"file_id":16,"beg":{"line":210,"col":4},"end":{"line":210,"col":59}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Returns a mutable reference to the output at this location, panicking"},{"DocComment":" if out of bounds."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Clause0_Output"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":1}},"Mut"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":2}},"Mut"]}},"kind":{"TraitDecl":{"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}},"item_name":"index_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":14,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get",0]}],"span":{"span":{"file_id":16,"beg":{"line":220,"col":4},"end":{"line":220,"col":43}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"UInt":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Adt":{"id":{"Adt":10},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":15,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get_mut",0]}],"span":{"span":{"file_id":16,"beg":{"line":230,"col":4},"end":{"line":230,"col":55}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"UInt":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":10},"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]}],"const_generics":[],"trait_refs":[null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_mut","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":16,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get_unchecked",0]}],"span":{"span":{"file_id":16,"beg":{"line":241,"col":4},"end":{"line":241,"col":64}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"UInt":"Usize"}},{"RawPtr":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"RawPtr":[{"TypeVar":{"Free":0}},"Shared"]}},"kind":{"TraitImpl":{"impl_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":17,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["get_unchecked_mut",0]}],"span":{"span":{"file_id":16,"beg":{"line":261,"col":4},"end":{"line":261,"col":64}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":true,"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"UInt":"Usize"}},{"RawPtr":[{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"RawPtr":[{"TypeVar":{"Free":0}},"Mut"]}},"kind":{"TraitImpl":{"impl_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"get_unchecked_mut","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":18,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["index",0]}],"span":{"span":{"file_id":16,"beg":{"line":272,"col":4},"end":{"line":272,"col":37}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"UInt":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Shared"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}},"kind":{"TraitImpl":{"impl_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"index","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":19,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}},{"Ident":["index_mut",0]}],"span":{"span":{"file_id":16,"beg":{"line":278,"col":4},"end":{"line":278,"col":49}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Literal":{"UInt":"Usize"}},{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]}},"kind":{"TraitImpl":{"impl_ref":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"trait_ref":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"index_mut","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":20,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":{"Trait":5}},{"Ident":["fmt",0]}],"span":{"span":{"file_id":18,"beg":{"line":232,"col":12},"end":{"line":232,"col":68}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":{"Int":"I32"}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":5},"generics":{"regions":[{"Var":{"Free":2}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":{"Adt":7},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":5,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}},"item_name":"fmt","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":21,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Impl":{"Trait":4}},{"Ident":["fmt",0]}],"span":{"span":{"file_id":10,"beg":{"line":2659,"col":12},"end":{"line":2659,"col":58}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null},{"index":3,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":10,"beg":{"line":2658,"col":31},"end":{"line":2658,"col":34}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":1}},{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},"Shared"]},{"Ref":[{"Var":{"Free":2}},{"Adt":{"id":{"Adt":5},"generics":{"regions":[{"Var":{"Free":3}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}],"output":{"Adt":{"id":{"Adt":6},"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":{"Adt":7},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[null,null]}}}},"kind":{"TraitImpl":{"impl_ref":{"id":4,"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":{"Clause":{"Free":0}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[]}},"item_name":"fmt","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null,null,null,null,null,null,null,{"def_id":29,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":2}},{"Ident":["index",0]}],"span":{"span":{"file_id":1,"beg":{"line":3476,"col":4},"end":{"line":3476,"col":46}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"},{"index":1,"name":"I"},{"index":2,"name":"A"},{"index":3,"name":"Clause3_Output"}],"const_generics":[],"trait_clauses":[null,null,null,{"clause_id":3,"span":{"span":{"file_id":1,"beg":{"line":3472,"col":11},"end":{"line":3472,"col":26}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}}}},null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,null,null]}}},"Shared"]},{"TypeVar":{"Free":1}}],"output":{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":3}},"Shared"]}},"kind":{"TraitImpl":{"impl_ref":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[null,null,null,{"kind":{"Clause":{"Free":3}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}}}},null]}},"trait_ref":{"id":4,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,null,null]}}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}},"item_name":"index","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}},null],"global_decls":[null,null,null,null,null,null,null,null],"trait_decls":[null,null,null,null,{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["index",0]},{"Ident":["Index",0]}],"span":{"span":{"file_id":15,"beg":{"line":60,"col":0},"end":{"line":60,"col":28}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Used for indexing operations (`container[index]`) in immutable contexts."},{"DocComment":""},{"DocComment":" `container[index]` is actually syntactic sugar for `*container.index(index)`,"},{"DocComment":" but only when used as an immutable value. If a mutable value is requested,"},{"DocComment":" [`IndexMut`] is used instead. This allows nice things such as"},{"DocComment":" `let value = v[index]` if the type of `value` implements [`Copy`]."},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" The following example implements `Index` on a read-only `NucleotideCount`"},{"DocComment":" container, enabling individual counts to be retrieved with index syntax."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::ops::Index;"},{"DocComment":""},{"DocComment":" enum Nucleotide {"},{"DocComment":"     A,"},{"DocComment":"     C,"},{"DocComment":"     G,"},{"DocComment":"     T,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" struct NucleotideCount {"},{"DocComment":"     a: usize,"},{"DocComment":"     c: usize,"},{"DocComment":"     g: usize,"},{"DocComment":"     t: usize,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Index<Nucleotide> for NucleotideCount {"},{"DocComment":"     type Output = usize;"},{"DocComment":""},{"DocComment":"     fn index(&self, nucleotide: Nucleotide) -> &Self::Output {"},{"DocComment":"         match nucleotide {"},{"DocComment":"             Nucleotide::A => &self.a,"},{"DocComment":"             Nucleotide::C => &self.c,"},{"DocComment":"             Nucleotide::G => &self.g,"},{"DocComment":"             Nucleotide::T => &self.t,"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let nucleotide_count = NucleotideCount {a: 14, c: 9, g: 10, t: 12};"},{"DocComment":" assert_eq!(nucleotide_count[Nucleotide::A], 14);"},{"DocComment":" assert_eq!(nucleotide_count[Nucleotide::C], 9);"},{"DocComment":" assert_eq!(nucleotide_count[Nucleotide::G], 10);"},{"DocComment":" assert_eq!(nucleotide_count[Nucleotide::T], 12);"},{"DocComment":" ```"},{"Unknown":{"path":"diagnostic::on_unimplemented","args":"message = \"the type `{Self}` cannot be indexed by `{Idx}`\", label =\n\"`{Self}` cannot be indexed by `{Idx}`\""}},{"Unknown":{"path":"doc","args":"alias = \"]\""}},{"Unknown":{"path":"doc","args":"alias = \"[\""}},{"Unknown":{"path":"doc","args":"alias = \"[]\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"index"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Idx"},{"index":2,"name":"Self_Output"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null,null,null],"consts":[],"types":[],"methods":[{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"index","item":{"id":3,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[4,"index"]}}],"vtable":{"id":{"Adt":12},"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["SliceIndex",0]}],"span":{"span":{"file_id":16,"beg":{"line":165,"col":0},"end":{"line":165,"col":67}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A helper trait used for indexing operations."},{"DocComment":""},{"DocComment":" Implementations of this trait have to promise that if the argument"},{"DocComment":" to `get_unchecked(_mut)` is a safe reference, then so is the result."},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"SliceIndex\""}},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(T = \"str\", label = \"string indices are ranges of `usize`\",),\non(all(any(T = \"str\", T = \"&str\", T = \"alloc::string::String\"), Self =\n\"{integer}\"), note =\n\"you can use `.chars().nth()` or `.bytes().nth()`\\n\\\n                for more information, see chapter 8 in The Book: \\\n                <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\"),\nmessage = \"the type `{T}` cannot be indexed by `{Self}`\", label =\n\"slice indices are of type `usize` or ranges of `usize`\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"SliceIndex"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"T"},{"index":2,"name":"Self_Output"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null,{"clause_id":1,"span":{"span":{"file_id":16,"beg":{"line":165,"col":40},"end":{"line":165,"col":67}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},null,null],"consts":[],"types":[],"methods":[{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"get","item":{"id":8,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[5,"get"]}},{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"get_mut","item":{"id":9,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[5,"get_mut"]}},{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"get_unchecked","item":{"id":10,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[5,"get_unchecked"]}},{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"get_unchecked_mut","item":{"id":11,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[5,"get_unchecked_mut"]}},{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"index","item":{"id":12,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[5,"index"]}},{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"index_mut","item":{"id":13,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[5,"index_mut"]}}],"vtable":{"id":{"Adt":8},"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[]}}},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]}],"span":{"span":{"file_id":10,"beg":{"line":1007,"col":0},"end":{"line":1007,"col":31}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Format trait for an empty format, `{}`."},{"DocComment":""},{"DocComment":" Implementing this trait for a type will automatically implement the"},{"DocComment":" [`ToString`][tostring] trait for the type, allowing the usage"},{"DocComment":" of the [`.to_string()`][tostring_function] method. Prefer implementing"},{"DocComment":" the `Display` trait for a type, rather than [`ToString`][tostring]."},{"DocComment":""},{"DocComment":" `Display` is similar to [`Debug`], but `Display` is for user-facing"},{"DocComment":" output, and so cannot be derived."},{"DocComment":""},{"DocComment":" For more information on formatters, see [the module-level documentation][module]."},{"DocComment":""},{"DocComment":" [module]: ../../std/fmt/index.html"},{"DocComment":" [tostring]: ../../std/string/trait.ToString.html"},{"DocComment":" [tostring_function]: ../../std/string/trait.ToString.html#tymethod.to_string"},{"DocComment":""},{"DocComment":" # Completeness and parseability"},{"DocComment":""},{"DocComment":" `Display` for a type might not necessarily be a lossless or complete representation of the type."},{"DocComment":" It may omit internal state, precision, or other information the type does not consider important"},{"DocComment":" for user-facing output, as determined by the type. As such, the output of `Display` might not be"},{"DocComment":" possible to parse, and even if it is, the result of parsing might not exactly match the original"},{"DocComment":" value."},{"DocComment":""},{"DocComment":" However, if a type has a lossless `Display` implementation whose output is meant to be"},{"DocComment":" conveniently machine-parseable and not just meant for human consumption, then the type may wish"},{"DocComment":" to accept the same format in `FromStr`, and document that usage. Having both `Display` and"},{"DocComment":" `FromStr` implementations where the result of `Display` cannot be parsed with `FromStr` may"},{"DocComment":" surprise users."},{"DocComment":""},{"DocComment":" # Internationalization"},{"DocComment":""},{"DocComment":" Because a type can only have one `Display` implementation, it is often preferable"},{"DocComment":" to only implement `Display` when there is a single most \"obvious\" way that"},{"DocComment":" values can be formatted as text. This could mean formatting according to the"},{"DocComment":" \"invariant\" culture and \"undefined\" locale, or it could mean that the type"},{"DocComment":" display is designed for a specific culture/locale, such as developer logs."},{"DocComment":""},{"DocComment":" If not all values have a justifiably canonical textual format or if you want"},{"DocComment":" to support alternative formats not covered by the standard set of possible"},{"DocComment":" [formatting traits], the most flexible approach is display adapters: methods"},{"DocComment":" like [`str::escape_default`] or [`Path::display`] which create a wrapper"},{"DocComment":" implementing `Display` to output the specific display format."},{"DocComment":""},{"DocComment":" [formatting traits]: ../../std/fmt/index.html#formatting-traits"},{"DocComment":" [`Path::display`]: ../../std/path/struct.Path.html#method.display"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Implementing `Display` on a type:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::fmt;"},{"DocComment":""},{"DocComment":" struct Point {"},{"DocComment":"     x: i32,"},{"DocComment":"     y: i32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl fmt::Display for Point {"},{"DocComment":"     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"},{"DocComment":"         write!(f, \"({}, {})\", self.x, self.y)"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let origin = Point { x: 0, y: 0 };"},{"DocComment":""},{"DocComment":" assert_eq!(format!(\"The origin is: {origin}\"), \"The origin is: (0, 0)\");"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(any(Self = \"std::path::Path\", Self = \"std::path::PathBuf\"), label =\n\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\",\nnote =\n\"call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data\",),\non(from_desugaring = \"FormatLiteral\", note =\n\"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\",\nlabel = \"`{Self}` cannot be formatted with the default formatter\",), message =\n\"`{Self}` doesn't implement `{This}`\""}},{"Unknown":{"path":"doc","args":"alias = \"{}\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":"\"Display\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Display"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[],"consts":[],"types":[],"methods":[{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"name":"fmt","item":{"id":7,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}},{"Var":{"Bound":[0,2]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}}},"kind":{"TraitMethod":[6,"fmt"]}}],"vtable":{"id":{"Adt":4},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Ident":["Sealed",0]}],"span":{"span":{"file_id":16,"beg":{"line":117,"col":4},"end":{"line":117,"col":20}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[null],"consts":[],"types":[],"methods":[],"vtable":{"id":{"Adt":9},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"trait_impls":[null,null,{"def_id":2,"item_meta":{"name":[{"Ident":["alloc",0]},{"Ident":["vec",0]},{"Impl":{"Trait":2}}],"span":{"span":{"file_id":1,"beg":{"line":3472,"col":0},"end":{"line":3472,"col":64}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":4,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null,null,null]}}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"I"},{"index":2,"name":"A"},{"index":3,"name":"Clause3_Output"}],"const_generics":[],"trait_clauses":[null,null,null,{"clause_id":3,"span":{"span":{"file_id":1,"beg":{"line":3472,"col":11},"end":{"line":3472,"col":26}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}}}},null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null,null,null],"consts":[],"types":[],"methods":[["index",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":29,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[null,null,null,{"kind":{"Clause":{"Free":3}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}}}},null]}},"kind":{"TraitMethod":[4,"index"]}}]],"vtable":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}},{"TypeVar":{"Free":2}}],"const_generics":[],"trait_refs":[null,null,null,{"kind":{"Clause":{"Free":3}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":3}}],"const_generics":[],"trait_refs":[]}}}},null]}}},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Impl":{"Trait":3}}],"span":{"span":{"file_id":16,"beg":{"line":216,"col":0},"end":{"line":216,"col":46}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The methods `index` and `index_mut` panic if the index is out of bounds."}],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":5,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}},{"Adt":{"id":{"Builtin":"Slice"},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[null],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null,{"kind":{"TraitImpl":{"id":7,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}}],"const_generics":[],"trait_refs":[]}}}},null,null],"consts":[],"types":[],"methods":[["get",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":14,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[5,"get"]}}],["get_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":15,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[5,"get_mut"]}}],["get_unchecked",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":16,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[5,"get_unchecked"]}}],["get_unchecked_mut",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":17,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[5,"get_unchecked_mut"]}}],["index",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":18,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[5,"index"]}}],["index_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":19,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}},"kind":{"TraitMethod":[5,"index_mut"]}}]],"vtable":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[null]}}},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Impl":{"Trait":4}}],"span":{"span":{"file_id":10,"beg":{"line":2658,"col":8},"end":{"line":2658,"col":46}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":6,"generics":{"regions":[],"types":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":10,"beg":{"line":2658,"col":31},"end":{"line":2658,"col":34}},"generated_from_span":null},"origin":"WhereClauseOnImpl","trait_":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[],"consts":[],"types":[],"methods":[["fmt",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":21,"generics":{"regions":[{"Var":{"Free":0}},{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}},{"Var":{"Bound":[0,2]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":{"Clause":{"Free":0}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[6,"fmt"]}}]],"vtable":{"id":3,"generics":{"regions":[{"Var":{"Free":0}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":{"Clause":{"Free":0}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}}},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":{"Trait":5}}],"span":{"span":{"file_id":18,"beg":{"line":231,"col":8},"end":{"line":231,"col":37}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":6,"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[],"consts":[],"types":[],"methods":[["fmt",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":20,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}},{"Var":{"Bound":[0,2]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[6,"fmt"]}}]],"vtable":{"id":2,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},null,{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["slice",0]},{"Ident":["index",0]},{"Ident":["private_slice_index",0]},{"Impl":{"Trait":7}}],"span":{"span":{"file_id":16,"beg":{"line":120,"col":4},"end":{"line":120,"col":25}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"id":7,"generics":{"regions":[],"types":[{"Literal":{"UInt":"Usize"}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[null],"consts":[],"types":[],"methods":[],"vtable":{"id":1,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"ordered_decls":[{"Type":{"NonRec":7}},{"Type":{"NonRec":5}},{"Type":{"NonRec":2}},{"Type":{"NonRec":6}},{"TraitDecl":{"NonRec":6}},{"Fun":{"NonRec":7}},{"Fun":{"NonRec":21}},{"TraitImpl":{"NonRec":4}},{"Fun":{"NonRec":20}},{"TraitImpl":{"NonRec":5}},{"Type":{"NonRec":3}},{"Fun":{"NonRec":4}},{"Fun":{"NonRec":5}},{"TraitDecl":{"NonRec":4}},{"Fun":{"NonRec":3}},{"Type":{"NonRec":10}},{"TraitDecl":{"NonRec":7}},{"TraitImpl":{"NonRec":7}},{"TraitDecl":{"NonRec":5}},{"Fun":{"NonRec":8}},{"Fun":{"NonRec":9}},{"Fun":{"NonRec":10}},{"Fun":{"NonRec":11}},{"Fun":{"NonRec":12}},{"Fun":{"NonRec":13}},{"Fun":{"NonRec":14}},{"Fun":{"NonRec":15}},{"Fun":{"NonRec":16}},{"Fun":{"NonRec":17}},{"Fun":{"NonRec":18}},{"Fun":{"NonRec":19}},{"TraitImpl":{"NonRec":3}},{"Fun":{"NonRec":6}},{"Type":{"NonRec":1}},{"Fun":{"NonRec":1}},{"Type":{"NonRec":0}},{"Fun":{"NonRec":2}},{"Fun":{"NonRec":29}},{"TraitImpl":{"NonRec":2}},{"Fun":{"NonRec":0}}]}} 