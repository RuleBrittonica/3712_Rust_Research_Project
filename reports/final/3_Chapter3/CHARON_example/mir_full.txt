// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let _8: &i32;
    let mut _9: &std::vec::Vec<i32>;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let _12: &[&str; 2];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &&i32;
    let mut _17: *const [i32; 3];
    let mut _18: *const ();
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    scope 1 {
        debug v => _1;
        let _7: &i32;
        scope 2 {
            debug x => _7;
        }
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _17 = copy (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _18 = copy _17 as *const () (PtrToPtr);
        _19 = copy _18 as usize (Transmute);
        _20 = AlignOf([i32; 3]);
        _21 = Sub(copy _20, const 1_usize);
        _22 = BitAnd(copy _19, copy _21);
        _23 = Eq(copy _22, const 0_usize);
        assert(copy _23, "misaligned pointer dereference: address must be a multiple of {} but is {}", copy _20, copy _19) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _9 = &_1;
        _8 = <Vec<i32> as Index<usize>>::index(move _9, const 0_usize) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _7 = copy _8;
        _12 = const main::promoted[0];
        _16 = &_7;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<&i32>(copy _16) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _14 = [move _15];
        _13 = &_14;
        _11 = Arguments::<'_>::new_v1::<2, 1>(copy _12, copy _13) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = _print(move _11) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        (*_17) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (PointerCoercion(Unsize, Implicit));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}